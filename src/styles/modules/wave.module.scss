.waveContainer {
  position: relative;
  width: 100%;
  height: 10vh;
  min-height: 200px;
  max-height: 350px;
  vector-effect: non-scaling-stroke;
  fill: none;
}

.waves {
  position: absolute;
  bottom: 0;
  left: 0;
  width: 100%;
  height: 100%;
}

/* 각 g 요소(웨이브 라인)에 수평 이동 애니메이션 적용 */
.parallax > g {
  animation-name: move-forever;
  animation-timing-function: linear;
  animation-iteration-count: infinite;
  animation-duration: 25s; /* 모든 라인에 동일한 속도 적용 */
}

/* 각 use 요소(웨이브 형태)에 수직 이동 애니메이션 적용 */
.parallax > g > use {
  animation-name: interact-wave;
  animation-duration: 7s;
  animation-timing-function: ease-in-out;
  animation-iteration-count: infinite;
  stroke: url(#wave-gradient);
  stroke-width: 0.06px;
  vector-effect: non-scaling-stroke;
}

/* 
  가장 안정적인 SCSS를 통해 그라데이션 색상을 직접 적용합니다.
  호환성 문제를 해결하기 위해 CSS 변수 대신 실제 색상 값을 사용합니다. 
*/
.waveGradientEdge {
  stop-color: rgba(#2563eb, 0.5); /* 라이트 모드 주조색 (반투명) */
}
.waveGradientMiddle {
  stop-color: rgba(#2563eb, 1); /* 라이트 모드 주조색 (불투명) */
}

[data-theme="dark"] {
  .waveGradientEdge {
    stop-color: rgba(#a84578, 0.5); /* 다크 모드 주조색 (반투명) */
  }
  .waveGradientMiddle {
    stop-color: rgba(#a84578, 1); /* 다크 모드 주조색 (불투명) */
  }
}

/* 
  42개 라인의 애니메이션 지연(delay) 설정
  - 수평 이동(g 태그)과 수직 이동(use 태그)에 각각 다른 delay를 적용하여 
    일정한 간격을 유지하며, 리드미컬하게 움직이도록 함.
*/
@for $i from 1 through 42 {
  .parallax > g:nth-child(#{$i}) {
    animation-delay: #{-0.5 * ($i - 1)}s; /* 수평 이동 지연 */
  }
  .parallax > g:nth-child(#{$i}) > use {
    animation-delay: #{-0.2 * ($i - 1)}s; /* 수직 이동 지연 */
  }
}

@keyframes move-forever {
  0% {
    transform: translate3d(-90px, 0, 0);
  }
  100% {
    transform: translate3d(85px, 0, 0);
  }
}

@keyframes interact-wave {
  0% {
    transform: translateY(0px);
  }
  50% {
    transform: translateY(-5px);
  }
  100% {
    transform: translateY(0px);
  }
}
